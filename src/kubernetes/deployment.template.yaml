apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
    spec:
      containers:
      - image: ${IMAGE_NAME}
        name: ${SERVICE_NAME}
        env:
          - name: SNL_NOTES_DB_HOST
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}-postgres-secret
                key: host
          - name: SNL_NOTES_DB_PORT
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}-postgres-secret
                key: port
          - name: SNL_NOTES_DB_NAME
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}-postgres-secret
                key: database
          - name: SNL_NOTES_DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}-postgres-secret
                key: username
          - name: SNL_NOTES_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}-postgres-secret
                key: password
          - name: SNL_NOTES_DB_PARAMS
            value: "?sslmode=require"
          - name: ENABLE_DB_MIGRATE_IN_SERVICE
            value: "false"
          - name: SNL_S2S_JWT_SECRET
            value: "${SNL_S2S_JWT_SECRET}"
          - name: SNL_FRONTEND_JWT_SECRET
            value: "${SNL_FRONTEND_JWT_SECRET}"
        envFrom:
          - configMapRef:
              name: ${SERVICE_NAME}-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "2500m"
        ports:
          - containerPort: 8093
            name: http
        imagePullPolicy: Always
---
#
# Service
#
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${SERVICE_NAME}
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8093
  selector:
    app: ${SERVICE_NAME}
---
#
# Ingress
#
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: ${SERVICE_FQDN}
    http:
      paths:
      - path: /
        backend:
          serviceName: ${SERVICE_NAME}
          servicePort: 80
---
#
# Service Catalog Database Instance
#
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceInstance
metadata:
  name: ${SERVICE_NAME}-postgres-instance
  namespace: ${NAMESPACE}
spec:
  #
  # Get the value of this from 'svcat get classes'
  #
  clusterServiceClassExternalName: azure-postgresql-9-6-database

  #
  # The 'SKU'. Get the value of this from 'svc describe class <class name>'
  #
  clusterServicePlanExternalName: database

  #
  # Parameters.  Get these from here: https://github.com/Azure/open-service-broker-azure/blob/master/docs/modules/postgresql.md
  # or 'svcat describe <class>/<plan>'
  # e.g. 'svcat describe plan azure-postgresql-9-6-database/database'
  #
  parameters:
    parentAlias: cnp-osba-postgres-server
---
#
# The binding.  This will return the secret with connection details, etc.
#
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceBinding
metadata:
  name: ${SERVICE_NAME}-postgres-binding
  namespace: ${NAMESPACE}
spec:
  instanceRef:
    name: ${SERVICE_NAME}-postgres-instance
  #
  # This is the secret used above in your pod environment config
  #
  secretName: ${SERVICE_NAME}-postgres-secret